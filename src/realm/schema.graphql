type Article {
  _id: ObjectId
  date: String
  image_url: String
  news_url: String
  sentiment: String
  source_name: String
  text: String
  ticker: String
}

input ArticleInsertInput {
  sentiment: String
  source_name: String
  text: String
  ticker: String
  _id: ObjectId
  date: String
  image_url: String
  news_url: String
}

input ArticleQueryInput {
  source_name_ne: String
  source_name_gt: String
  text_ne: String
  ticker_in: [String]
  _id_lt: ObjectId
  news_url: String
  date: String
  source_name_exists: Boolean
  news_url_lt: String
  sentiment_nin: [String]
  _id_lte: ObjectId
  news_url_ne: String
  news_url_nin: [String]
  date_gt: String
  image_url: String
  ticker_exists: Boolean
  date_in: [String]
  image_url_exists: Boolean
  source_name_lte: String
  _id_nin: [ObjectId]
  image_url_gt: String
  news_url_gte: String
  image_url_in: [String]
  ticker_gt: String
  _id_ne: ObjectId
  source_name_lt: String
  date_lt: String
  image_url_nin: [String]
  sentiment_ne: String
  sentiment_lt: String
  date_lte: String
  text: String
  source_name: String
  image_url_gte: String
  source_name_gte: String
  date_nin: [String]
  ticker: String
  news_url_lte: String
  ticker_lt: String
  image_url_lte: String
  image_url_ne: String
  sentiment_gt: String
  AND: [ArticleQueryInput!]
  text_nin: [String]
  sentiment: String
  _id_gte: ObjectId
  _id: ObjectId
  date_gte: String
  text_exists: Boolean
  date_exists: Boolean
  ticker_nin: [String]
  news_url_in: [String]
  news_url_exists: Boolean
  _id_exists: Boolean
  sentiment_exists: Boolean
  text_lt: String
  text_in: [String]
  OR: [ArticleQueryInput!]
  _id_in: [ObjectId]
  ticker_gte: String
  ticker_lte: String
  sentiment_gte: String
  ticker_ne: String
  text_gte: String
  image_url_lt: String
  source_name_in: [String]
  date_ne: String
  text_lte: String
  source_name_nin: [String]
  sentiment_lte: String
  sentiment_in: [String]
  news_url_gt: String
  text_gt: String
  _id_gt: ObjectId
}

enum ArticleSortByInput {
  SOURCE_NAME_ASC
  TICKER_ASC
  TICKER_DESC
  NEWS_URL_DESC
  TEXT_ASC
  _ID_ASC
  DATE_ASC
  DATE_DESC
  IMAGE_URL_ASC
  IMAGE_URL_DESC
  NEWS_URL_ASC
  SENTIMENT_ASC
  SENTIMENT_DESC
  SOURCE_NAME_DESC
  TEXT_DESC
  _ID_DESC
}

input ArticleUpdateInput {
  source_name_unset: Boolean
  news_url_unset: Boolean
  image_url_unset: Boolean
  image_url: String
  news_url: String
  text_unset: Boolean
  date: String
  text: String
  ticker: String
  sentiment: String
  _id: ObjectId
  date_unset: Boolean
  source_name: String
  ticker_unset: Boolean
  _id_unset: Boolean
  sentiment_unset: Boolean
}

type DeleteManyPayload {
  deletedCount: Int!
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

type Mutation {
  deleteManyArticles(query: ArticleQueryInput): DeleteManyPayload
  deleteManyTests(query: TestQueryInput): DeleteManyPayload
  deleteManyUsers(query: UserQueryInput): DeleteManyPayload
  deleteOneArticle(query: ArticleQueryInput!): Article
  deleteOneTest(query: TestQueryInput!): Test
  deleteOneUser(query: UserQueryInput!): User
  insertManyArticles(data: [ArticleInsertInput!]!): InsertManyPayload
  insertManyTests(data: [TestInsertInput!]!): InsertManyPayload
  insertManyUsers(data: [UserInsertInput!]!): InsertManyPayload
  insertOneArticle(data: ArticleInsertInput!): Article
  insertOneTest(data: TestInsertInput!): Test
  insertOneUser(data: UserInsertInput!): User
  replaceOneArticle(query: ArticleQueryInput, data: ArticleInsertInput!): Article
  replaceOneTest(query: TestQueryInput, data: TestInsertInput!): Test
  replaceOneUser(query: UserQueryInput, data: UserInsertInput!): User
  updateManyArticles(query: ArticleQueryInput, set: ArticleUpdateInput!): UpdateManyPayload
  updateManyTests(query: TestQueryInput, set: TestUpdateInput!): UpdateManyPayload
  updateManyUsers(query: UserQueryInput, set: UserUpdateInput!): UpdateManyPayload
  updateOneArticle(query: ArticleQueryInput, set: ArticleUpdateInput!): Article
  updateOneTest(query: TestQueryInput, set: TestUpdateInput!): Test
  updateOneUser(query: UserQueryInput, set: UserUpdateInput!): User
  upsertOneArticle(query: ArticleQueryInput, data: ArticleInsertInput!): Article
  upsertOneTest(query: TestQueryInput, data: TestInsertInput!): Test
  upsertOneUser(data: UserInsertInput!, query: UserQueryInput): User
}

scalar ObjectId

type Query {
  article(query: ArticleQueryInput): Article
  articles(limit: Int = 100, sortBy: ArticleSortByInput, query: ArticleQueryInput): [Article]!
  test(query: TestQueryInput): Test
  tests(query: TestQueryInput, limit: Int = 100, sortBy: TestSortByInput): [Test]!
  user(query: UserQueryInput): User
  users(query: UserQueryInput, limit: Int = 100, sortBy: UserSortByInput): [User]!
}

type Test {
  _id: ObjectId
  data: [String]
  indicator: String
  maxY: Int
  ticker: String
  winrate: Float
}

input TestInsertInput {
  ticker: String
  winrate: Float
  _id: ObjectId
  data: [String]
  indicator: String
  maxY: Int
}

input TestQueryInput {
  indicator_lte: String
  maxY_ne: Int
  indicator_gte: String
  _id_ne: ObjectId
  ticker_exists: Boolean
  maxY: Int
  ticker_lt: String
  winrate_gte: Float
  ticker_in: [String]
  ticker_gte: String
  indicator: String
  winrate_lt: Float
  winrate_lte: Float
  _id_exists: Boolean
  winrate_exists: Boolean
  _id_gte: ObjectId
  data_nin: [String]
  indicator_nin: [String]
  maxY_in: [Int]
  AND: [TestQueryInput!]
  maxY_gt: Int
  data_in: [String]
  indicator_lt: String
  maxY_exists: Boolean
  maxY_lte: Int
  maxY_nin: [Int]
  _id_lte: ObjectId
  ticker_ne: String
  data_exists: Boolean
  winrate_nin: [Float]
  ticker_nin: [String]
  _id_nin: [ObjectId]
  _id_lt: ObjectId
  indicator_gt: String
  indicator_in: [String]
  data: [String]
  winrate: Float
  ticker_lte: String
  indicator_ne: String
  maxY_lt: Int
  winrate_ne: Float
  _id: ObjectId
  indicator_exists: Boolean
  ticker: String
  _id_in: [ObjectId]
  _id_gt: ObjectId
  maxY_gte: Int
  ticker_gt: String
  winrate_in: [Float]
  OR: [TestQueryInput!]
  winrate_gt: Float
}

enum TestSortByInput {
  _ID_DESC
  INDICATOR_ASC
  MAXY_ASC
  WINRATE_DESC
  _ID_ASC
  INDICATOR_DESC
  MAXY_DESC
  TICKER_ASC
  TICKER_DESC
  WINRATE_ASC
}

input TestUpdateInput {
  maxY: Int
  maxY_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  indicator: String
  data: [String]
  winrate: Float
  winrate_unset: Boolean
  indicator_unset: Boolean
  ticker_unset: Boolean
  ticker: String
  winrate_inc: Float
  maxY_inc: Int
  data_unset: Boolean
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

type User {
  email: String!
  name: String!
}

input UserInsertInput {
  name: String!
  email: String!
}

input UserQueryInput {
  email_lt: String
  name_exists: Boolean
  email_in: [String]
  name_in: [String]
  OR: [UserQueryInput!]
  name: String
  name_ne: String
  name_gt: String
  email: String
  AND: [UserQueryInput!]
  name_lt: String
  name_lte: String
  name_gte: String
  email_gte: String
  email_lte: String
  email_nin: [String]
  name_nin: [String]
  email_gt: String
  email_exists: Boolean
  email_ne: String
}

enum UserSortByInput {
  EMAIL_ASC
  EMAIL_DESC
  NAME_ASC
  NAME_DESC
}

input UserUpdateInput {
  email_unset: Boolean
  name: String
  name_unset: Boolean
  email: String
}
